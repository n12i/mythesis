%!PS-Adobe-2.0 EPSF-2.0
%%Title: shear-stress.eps
%%Creator: gnuplot 3.5 (pre 3.6) patchlevel beta 349 (+1.1.8 1998/12/29)
%%CreationDate: Sun Feb 14 14:42:54 1999
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 300 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -60 def
/dl {10 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/setfontparam {exch /df exch def
 dup dup dup dup
 /ns exch def
 /ss exch 0.7 mul def
 /vshift exch -3 div def
 /upshift exch 14 div def
 /downshift exch 7 div def
} def
/Helvetica 180 setfontparam
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/UL { gnulinewidth mul /userlinewidth exch def } def
/PL { stroke userlinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/makecompfont {
15 dict begin
 findfont /kanjifont exch def
 findfont /asciifont exch def
 /FontType 0 def
 /WMode 0 def
 /FMapType 3 def
 /FontMatrix matrix def
 /Encoding [0 1] def
 /FDepVector
 [asciifont 1 scalefont
  kanjifont 1 scalefont] def
 dup /FontName exch def
 currentdict
end
definefont pop
} def
/Helvetica-Ryumin /Helvetica /Ryumin-Light-H makecompfont
/CT { Color {}{pop pop pop 0 0 0 } ifelse setrgbcolor} def
/Green   { 0   1   0   CT } def
/Blue    { 0   0   1   CT } def
/Red     { 1   0   0   CT } def
/Purple  { 1   0   1   CT } def
/Skyblue { 0   1   1   CT } def
/Yellow  { 1   1   0   CT } def
/Black   { 0   0   0   CT } def
/Orange  { 1   0.3 0   CT } def
/Gray    { 0.5 0.5 0.5 CT } def
/Grey    { 0.5 0.5 0.5 CT } def
/HLen 100 def %%%% length of arrow-head
/HWid  50 def %%%%  width of arrow-wing
/Arrow {stroke [] 0 setdash
 /ArWid currentlinewidth 2 div def
 2 copy 6 2 roll exch 3 1 roll sub 3 1 roll sub 2 copy
 2 exp exch 2 exp add sqrt 3 1 roll atan 4 -2 roll moveto gsave
 currentpoint translate rotate drawArrow grestore } def
/drawArrow {dup 0 0 moveto 0 ArWid rlineto
HLen 2 mul 3 div sub 0 rlineto HLen -3 div HWid ArWid sub rlineto
HLen HWid neg rlineto HLen neg HWid neg rlineto
HLen  3 div HWid ArWid sub rlineto HLen 2 mul 3 div sub neg 0 rlineto
closepath fill} def
/rm /Times-Roman def
/it /Times-Italic def
/tt /Courier def
/sf /Helvetica def
/bit /Times-BoldItalic def
/brm /Times-Bold def
/btt /Courier-Bold def
/bsf /Helvetica-Bold def
/sm /Symbol def
/nsm /NewSymbol def
/mincho /Ryumin-Light-H def
/gothic /GothicBBB-Medium-H def
/vectorsize 0.5 def  %%%% vector size
/stringheight { gsave newpath 0 0 moveto
 false charpath pathbbox 4 2 roll pop pop
 dup abs 1 lt {pop 1.1 mul}{exch pop} ifelse
 newpath grestore } def
/stringdepth  { gsave newpath 0 0 moveto
 false charpath pathbbox 4 -1 roll pop pop pop neg
 newpath grestore } def
/selectfont { exch findfont exch
 dup type /arraytype eq {makefont}{scalefont} ifelse setfont
} bind def
/o {dup dup /ar matrix def
 ar 0 3 -1 roll put ar 3 3 -1 roll put
 10 sin 10 cos div mul ar 2 3 -1 roll put ar} def
/v {dup /ar matrix def
 ar 0 3 -1 roll put ar 3 3 -1 roll 2.5 mul put ar} def
/size {ns mul 140 div} def
/Vs {vectorsize mul} def
/init0 {/strlen 0 def /Lup 0 def /Ldown 0 def} def
/init  {init0 /nfrac 0 def /numearray 11 array def /denoarray 11 array def} def
/strwidth {selectfont stringwidth pop} def
/upordown {Lup Ldown ge {Lup}{Ldown} ifelse} def
/nln {strwidth strlen add /strlen exch def
 /strlen strlen upordown add def /Lup 0 def /Ldown 0 def} def
/uln {strwidth Lup   add /Lup   exch def} def
/dln {strwidth Ldown add /Ldown exch def} def
/fracstartln { /strlenorg  strlen upordown add def init0
 /nfrac nfrac 1 add def} def
/fracmidln   { /strlennume strlen upordown add def init0
 numearray nfrac strlennume put} def
/fracendln   { /strlendeno strlen upordown add def init0
 denoarray nfrac strlendeno put
 strlennume strlendeno ge {strlennume}{strlendeno} ifelse strlenorg add
 /strlen exch def } def
/cpx {currentpoint      pop} def
/cpy {currentpoint exch pop} def
/n {xup xdown ge {xup}{xdown} ifelse baseline moveto
 selectfont dup show dup length dup 0 gt
{1 sub 1 getinterval /str exch def
/d-shift str stringdepth dup downshift lt {pop downshift}if def
/u-shift str stringheight ss 3 div sub dup upshift lt {pop upshift}if def}
{pop pop /d-shift (\275) stringdepth def
/u-shift (\275) stringheight 0.9 mul def
} ifelse /xup cpx def /xdown cpx def} def
/n2 {xup xdown ge {xup}{xdown} ifelse baseline moveto
 selectfont dup show /str exch def
/d-shift str stringdepth dup downshift lt {pop downshift}if def
/u-shift str stringheight ss 3 div sub dup upshift lt {pop upshift}if def
/xup cpx def /xdown cpx def} def
/u {xup baseline u-shift add moveto
 selectfont show /xup cpx def } def
/uu {xup baseline u-shift add upshift add moveto
 selectfont show /xup cpx def } def
/ud {xup baseline u-shift add downshift 2 div sub moveto
 selectfont show /xup cpx def } def
/d {xdown baseline d-shift sub moveto
 selectfont show /xdown cpx def } def
/du {xdown baseline d-shift sub upshift add moveto
 selectfont show /xdown cpx def } def
/dd {xdown baseline d-shift sub downshift 2 div sub moveto
 selectfont show /xdown cpx def } def
/initshow {/u-shift upshift def /d-shift downshift def
 /xup cpx def /xdown cpx def /baseline cpy def} def
/numeheight {/Symbol ns selectfont (\275) dup
 stringheight exch stringdepth add 2 div} def
/denodepth numeheight def
/fracstart{/baselineorg baseline def /nfrac nfrac 1 add def
 xup xdown ge {xup}{xdown} ifelse baseline moveto /fracstartx cpx def
 /strlennume numearray nfrac get def /strlendeno denoarray nfrac get def
 strlennume strlendeno ge {strlennume}{strlendeno} ifelse 2 div
 strlennume 2 div sub numeheight rmoveto initshow} def
/fracmid{xup xdown ge {xup}{xdown} ifelse /numex exch def
 fracstartx baselineorg moveto
 strlennume strlendeno ge {strlennume}{strlendeno} ifelse 2 div
 strlendeno 2 div sub denodepth neg rmoveto initshow} def
/fracend{xup xdown ge {xup}{xdown} ifelse /denox exch def
 gsave numex denox ge {numex}{denox} ifelse dup
 baselineorg numeheight 2 div add dup
 3 1 roll stroke moveto fracstartx exch lineto
 5.0 setlinewidth [] 0 setdash stroke grestore
 baselineorg moveto initshow} def
/Left { currentpoint stroke moveto
  0 ns -3 div rmoveto initshow /nfrac 0 def} def
/Right { currentpoint stroke moveto
  /strlen strlen upordown add def
  strlen neg ns -3 div rmoveto initshow /nfrac 0 def} def
/Center { currentpoint stroke moveto
  /strlen strlen upordown add def
  strlen -2 div ns -3 div rmoveto initshow /nfrac 0 def} def
/head
{ gsave dup stringwidth pop -2 div exch stringheight 1.1 mul rmoveto
  selectfont dup dup stringwidth pop -2 div exch stringdepth
  rmoveto show grestore } def
/startline {dup 0 eq{pop /OLH (\275) stringheight 0.8 mul cpy add def
/OLstart cpx def /OvL 1 def }{1 eq{/ULH (\275) stringdepth cpy exch sub def
/ULstart cpx def /UnL 1 def }{/SLH (\326) stringheight cpy add def
/SLstart cpx def /SqL 1 def }ifelse} ifelse} def
/endline{dup 0 eq{pop OLstart OLH drawline}{1 eq{ULstart ULH drawline}
{SLstart SLH drawline}ifelse}ifelse} def
/drawline {dup gsave cpx stroke exch moveto lineto [] 0 setdash
 5.0 setlinewidth stroke grestore} def
/ISO {findfont
dup length dict begin
 {1 index /FID ne {def}{pop pop}ifelse}forall
 /Encoding ISOLatin1Encoding def
 currentdict
end
/ISOLatin1 exch definefont pop /ISOLatin1
} bind def
/ch-image {ch-data 0 get} bind def
/ch-width {ch-data 1 get} bind def
/ch-height {ch-data 2 get} bind def
/ch-xoff {ch-data 3 get} bind def
/ch-yoff {ch-data 4 get} bind def
/ch-tfmw {ch-data 5 get} bind def
/CharBuilder {
/ch-code exch def
/font-dict exch def
/ch-data font-dict /BitMaps get ch-code get def
ch-data null eq not {
ch-tfmw 0
ch-xoff neg  ch-yoff neg ch-width ch-xoff sub ch-height ch-yoff sub
setcachedevice
ch-width ch-height true [1 0  0 1  ch-xoff ch-yoff]
{ch-image} imagemask
} if
} bind def
/s3 3 string def
/D {
/ch-code exch def
/ch-data exch def
currentfont /BitMaps get ch-code ch-data put
currentfont /Encoding get ch-code
dup s3 cvs cvn put
} bind def
/fsize 105 def
/corr 0.007 def
/NewSymbol 7 dict def
/NewSymbol load begin
/FontType 3 def
/FontMatrix [corr 0 0 corr 0 0] def
/FontBBox [0 0 1 1] def
/BitMaps fsize array def
/BuildChar /CharBuilder load def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
end
/NewSymbol /NewSymbol load definefont pop
NewSymbol setfont
[<3C0000000003F00000FE000000001FFE0000FF000000003FFF0000FF800000007E07C000
  FF80000000FE03E000FF80000001FC00F000FFC0000001FC007800FFC0000003FC003800
  7FC0000003FC003C007FC0000003FC001E007FE0000003FC000E007FE0000003FE000F00
  3FE0000003FE0007003FE0000003FE0007803FF0000003FE0003803FF0000003FF000380
  1FF0000001FF0003C01FF0000001FF8001C01FF8000000FF8001C01FF8000000FF8001E0
  0FF8000000FFC000E00FF80000007FC000E00FFC0000007FC000600FFC0000007FE00000
  07FC0000003FE0000007FC0000003FE0000007FE0000003FF0000007FE0000001FF00000
  03FE0000001FF0000003FE0000001FF8000003FF0000000FF8000003FF0000000FF80000
  01FF0000000FFC000001FF00000007FC000001FF80000007FC000001FF80000007FE0000
  00FF80000003FE000000FF80000003FE000000FFC0000003FE000000FFC0000003FF0000
  007FC0000001FF0000007FC0000001FF0000007FE0000001FF0000007FE0000001FF8000
  003FE0000000FF8000003FF0000000FF8000003FF0000000FF8000003FF8000000FF8000
  001FFC000000FF8000001FFC000000FF8000001FFE0000007F8000001FFF0000007F8000
  000FFF8000007F8000000FFF800000FF8000000FFFC00000FF8000000FFDE00000FF0000
  0007FCF80000FF00000007FC7C0001FE00000007FE3E0001FE00000007FE0FC003FC0000
  0003FE07F80FF800000003FE01FFFFE000000003FF007FFF8000000003FF0007FC000000
  0001FF0000000000000001FF0000000000000001FF8000000000000001FF800000000000
  0000FF8000000000000000FF8000000000000000FFC000000000000000FFC00000000000
  00007FC0000000000000007FC0000000000000007FE0000000000000007FE00000000000
  00003FE0000000000000003FE0000000000000003FF0000000000000003FF00000000000
  0FFFFFFFFFFFF800000FFFFFFFFFFFF800000FFFFFFFFFFFF800000FFFFFFFFFFFF80000
  00000FF8000000000000000FF8000000000000000FFC000000000000000FFC0000000000
  000007FC0000000000000007FC0000000000000007FE0000000000000007FE0000000000
  000003FE0000000000000007FE000000000000000FFF0000000000000FFFFF0000000000
  001FFFFF0000000000000FFFFF0000000000000FFFFF800000000000007FFF8000000000
  0000003F0000000000>
72 101 -8 1 80.861] 104 D
[<00000FFC00000000FFFFC0000003FFFFF000000FF803FC00001FE0003F00007F80000FC0
  00FF000003C001FE000001C003FC0000000007FC0000000007F8000000000FF000000000
  0FF0000000001FF0000000001FE0000000003FE0000000003FE0000000003FE000000000
  7FE0000000007FE0000000007FC0000000007FC0000000007FE0000000007FE000000000
  FFE000000000FFE000000000FFE000000000FFE0000000007FE0000000007FE000000000
  7FF0000000007FF0000000007FF0000000007FF0000000007FFFFFFFFE003FFFFFFFFF00
  3FFFFFFFFF003FFFFFFFFC003FFC000000001FFC000000001FFC000000000FFE00000000
  0FFE0000000007FE0000000007FF0000000003FF0000000003FF8000000001FF80000000
  00FFC0000000007FE0000000003FE0000000001FF0000000000FF80000000007FC000000
  0003FE0000000001FF80000000007FC0000000003FF8000000000FFF0000000003FFFFF8
  000000FFFFFC0000001FFFFC00000001FFF8>
48 63 -6 1 56.719] 15 D
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica-Ryumin) findfont 180 scalefont setfont
1.000 UL
LTb
918 540 M
63 0 V
5913 0 R
-63 0 V
810 540 M
(-2.5) Rshow
918 968 M
63 0 V
5913 0 R
-63 0 V
810 968 M
(-2) Rshow
918 1397 M
63 0 V
5913 0 R
-63 0 V
-6021 0 R
(-1.5) Rshow
918 1825 M
63 0 V
5913 0 R
-63 0 V
-6021 0 R
(-1) Rshow
918 2254 M
63 0 V
5913 0 R
-63 0 V
-6021 0 R
(-0.5) Rshow
918 2682 M
63 0 V
5913 0 R
-63 0 V
-6021 0 R
(0) Rshow
918 3110 M
63 0 V
5913 0 R
-63 0 V
-6021 0 R
(0.5) Rshow
918 3539 M
63 0 V
5913 0 R
-63 0 V
-6021 0 R
(1) Rshow
918 3967 M
63 0 V
5913 0 R
-63 0 V
-6021 0 R
(1.5) Rshow
918 4396 M
63 0 V
5913 0 R
-63 0 V
-6021 0 R
(2) Rshow
918 4824 M
63 0 V
5913 0 R
-63 0 V
-6021 0 R
(2.5) Rshow
918 540 M
0 63 V
0 4221 R
0 -63 V
918 360 M
(-0.1) Cshow
2412 540 M
0 63 V
0 4221 R
0 -63 V
0 -4401 R
(-0.05) Cshow
3906 540 M
0 63 V
0 4221 R
0 -63 V
0 -4401 R
(0) Cshow
5400 540 M
0 63 V
0 4221 R
0 -63 V
0 -4401 R
(0.05) Cshow
6894 540 M
0 63 V
0 4221 R
0 -63 V
0 -4401 R
(0.1) Cshow
1.000 UL
LTa
918 2682 M
5976 0 V
1.000 UL
LTa
3906 540 M
0 4284 V
1.000 UL
LTb
918 540 M
5976 0 V
0 4284 V
-5976 0 V
918 540 L
180 2682 M
currentpoint gsave translate 90 rotate 0 0 M
gsave
init
(shear stress \(kgf/cm) df ns nln
(2) sm ss uln
(\)) df ns nln
Center
(shear stress \(kgf/cm) df ns n
(2) sm ss u
(\)) df ns n
grestore
grestore
3906 90 M
(story deformation angle \(rad\)) Cshow
1.000 UP
1.000 UL
LT0
1026 4671 M
(\377\001\71\123\112\111\377\000\(\377\001\66\132\44\53\44\44\44\112\44\67\377\000\)) Lshow
3078 4671 M
495 0 V
918 2349 M
996 -160 V
996 -137 V
498 33 V
249 109 V
125 126 V
62 116 V
62 246 V
62 216 V
63 146 V
124 151 V
249 142 V
498 96 V
996 -92 V
996 -275 V
918 2349 Circle
1914 2189 Circle
2910 2052 Circle
3408 2085 Circle
3657 2194 Circle
3782 2320 Circle
3844 2436 Circle
3906 2682 Circle
3968 2898 Circle
4031 3044 Circle
4155 3195 Circle
4404 3337 Circle
4902 3433 Circle
5898 3341 Circle
6894 3066 Circle
3325 4671 Circle
1.000 UP
1.000 UL
LT0
1026 4491 M
(\377\001\71\123\112\111\377\000\(\377\001\66\132\44\53\44\44\111\125\377\000\)) Lshow
3078 4491 M
495 0 V
918 2274 M
996 -222 V
966 70 V
30 -137 V
498 137 V
249 123 V
124 157 V
63 109 V
62 171 V
62 234 V
63 -8 V
124 -59 V
249 400 V
498 216 V
996 75 V
996 -346 V
918 2274 Circle
1914 2052 Circle
2880 2122 Circle
2910 1985 Circle
3408 2122 Circle
3657 2245 Circle
3781 2402 Circle
3844 2511 Circle
3906 2682 Circle
3968 2916 Circle
4031 2908 Circle
4155 2849 Circle
4404 3249 Circle
4902 3465 Circle
5898 3540 Circle
6894 3194 Circle
3325 4491 Circle
1.000 UP
1.000 UL
LT2
1026 4311 M
(\377\001\103\146\105\111\44\152\377\000\(\377\001\66\132\44\53\44\44\44\112\44\67\377\000\)) Lshow
3078 4311 M
495 0 V
918 2377 M
996 -334 V
996 -462 V
3408 926 L
249 104 V
125 596 V
62 459 V
62 597 V
62 417 V
63 224 V
124 544 V
249 541 V
498 -510 V
996 -511 V
996 -380 V
918 2377 Box
1914 2043 Box
2910 1581 Box
3408 926 Box
3657 1030 Box
3782 1626 Box
3844 2085 Box
3906 2682 Box
3968 3099 Box
4031 3323 Box
4155 3867 Box
4404 4408 Box
4902 3898 Box
5898 3387 Box
6894 3007 Box
3325 4311 Box
1.000 UP
1.000 UL
LT2
1026 4131 M
(\377\001\103\146\105\111\44\152\377\000\(\377\001\66\132\44\53\44\44\111\125\377\000\)) Lshow
3078 4131 M
495 0 V
918 2727 M
996 -160 V
966 -245 V
30 -746 V
498 -115 V
249 340 V
124 301 V
63 203 V
62 377 V
62 386 V
63 438 V
124 437 V
249 490 V
498 -325 V
5898 3073 L
996 -401 V
918 2727 Box
1914 2567 Box
2880 2322 Box
2910 1576 Box
3408 1461 Box
3657 1801 Box
3781 2102 Box
3844 2305 Box
3906 2682 Box
3968 3068 Box
4031 3506 Box
4155 3943 Box
4404 4433 Box
4902 4108 Box
5898 3073 Box
6894 2672 Box
3325 4131 Box
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica-Ryumin
